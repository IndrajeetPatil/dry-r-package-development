---
#title: "DRY R Package Development"
format:
  revealjs: 
    theme: simple
    slide-number: true
    preview-links: auto
    footer: "Source code for the slides can be found [here](https://github.com/IndrajeetPatil/dry-r-package-development/)."
#author: "Indrajeet Patil"
#affiliation: 
execute:
  echo: true
---

## DRY Package Development in R {style="text-align: center;"}

::: {style="text-align: center;"}

[Indrajeet Patil](https://sites.google.com/site/indrajeetspatilmorality/)

:::


<!-- ::: {style="margin-top: 10em; font-size:0.75em"} -->

<!-- - [Link to slides](https://indrajeetpatil.github.io/dry-r-package-development/) -->
<!-- - [Github repo](https://github.com/IndrajeetPatil/dry-r-package-development/) -->

<!-- ::: -->

![](media/simpsons.png){.absolute width="900" height="500" left="70" top="155"}

<!-- Need to install extension from https://github.com/quarto-ext/fontawesome -->
<!-- Run `quarto install extension quarto-ext/fontawesome` in terminal -->

# DRY it up

Why should you not repeat yourself?

## Don't Repeat Yourself (DRY) Principle {.smaller}

# Documentation

How not to repeat yourself while writing documentation.

## What do users read? {.smaller}

What users consult to find needed information maybe context-dependent.

</br>

. . .

{{< fa brands readme size=2xl >}} **README**: While exploring the package repository.

</br>

{{< fa file-pdf size=2xl >}} **Manual**: While reading PDF manual or help pages in the IDE.

</br>

{{< fa file size=2xl >}} **Vignettes**: While reading documentation on CRAN.

</br>

. . .

Thus, including crucial information **only in one place** makes it likely that the users might miss out on it in certain contexts.

## Go forth and multiply (without repetition) {.smaller}

:::: {.columns}

::: {.column width='40%'}

Some documentation is important enough to be included in multiple places (e.g. in the function documentation and in a vignette).

</br>

> How can we document something just *once* but include it in *multiple* locations?

:::

::: {.column width='60%'}

```{r, echo=FALSE, out.width="100%"}
knitr::include_graphics("media/spiderman.jpeg")
```

:::

::::

## Child documents

You can stitch an R Markdown document from smaller [child documents](https://bookdown.org/yihui/rmarkdown-cookbook/child-document.html).

&nbsp; &nbsp; {{< fa regular file size=5x >}} &nbsp; &nbsp; {{< fa regular plus size=5x >}} &nbsp; &nbsp; {{< fa regular file-lines size=5x >}} &nbsp;&nbsp; {{< fa soliud equals size=5x >}} &nbsp;&nbsp; {{< fa solid file-lines size=5x >}}

(parent Rmd) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (child Rmd) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (result Rmd)

. . .

Thus, the information to repeat can be stored *once* in child documents and reused *multiple* times across parents.

## Storing child documents in package {.smaller}

Stratagem: You can store child documents in the manual directory and reuse them.

:::: {.columns}

::: {.column width='30%'}

**Child documents**

```
├── DESCRIPTION
├── man
│   └── rmd-children
│       └── doc1.Rmd
│       └── ...
```

:::

::: {.column width='70%'}

`man/rmd-children/doc1.Rmd` example.

````{verbatim}
This is some crucial information to be repeated across documentation.

```{r}
1 + 1
```

````

:::

::::

:::{.callout-tip}

## Tips

- You can include as many child documents as you want.
- The child document is just like any `.Rmd` file and can include everything that any other `.Rmd` file can include.
- You can choose a different name for the folder containing child documents.
- Make sure to include `Roxygen: list(markdown = TRUE)` field in the `DESCRIPTION` file.

:::

## Using child documents in package {.smaller}

You can now insert contents of these child documents in the package documentation anywhere and as many as times as you want.

. . . 

:::: {.columns}

::: {.column width='30%'}

**Vignette**

```
├── DESCRIPTION
├── vignettes
│   └── vignette1.Rmd
│   └── ...
│   └── web_only
│       └── vignette2.Rmd
│       └── ...
```

:::

::: {.column width='70%'}

**Example** (`vignettes/vignette1.Rmd`)

````{verbatim}
---
output: rmarkdown::html_vignette
---

Some content.

```{r, child="../man/rmd-children/doc1.Rmd"}
```

````

:::

::::

. . .

:::: {.columns}

::: {.column width='30%'}

**README**

```
├── DESCRIPTION
├── README.Rmd
```

:::

::: {.column width='70%'}

**Example** (`README.Rmd`)

````{verbatim}
---
output: github_document
---

Some content.

```{r, child = "man/rmd-children/doc1.Rmd"}
```

````

:::

::::

. . . 

**etc.**

## Self-study {.smaller}

Example packages that use this method to repeat docs across manual, README, and vignettes.

- [`{pkgdown}`](https://github.com/r-lib/pkgdown/tree/main/man/rmd-fragments)

- [`{statsExpressions}`](https://github.com/IndrajeetPatil/statsExpressions/tree/main/man/rmd-fragments)

# Data

How not to repeat yourself while creating and re-using example datasets.

## Example data

If none of the existing datasets are usable to illustrate your functions, you can create your own example dataset.

But using it in examples, vignettes, README, etc. will require that you define it multiple times.

How can you avoid this repetition?

## Shipping data in a package {.smaller}

Let's say your example dataset `exdat` is defined as:

```{r}
exdat <- matrix(c(71, 50, 30, 100), nrow = 2)
```

. . . 

:::: {.columns}

::: {.column width='70%'}

**Saving data**

For future reference, save script to create the dataset.

```{r, eval=FALSE}
exdat <- matrix(c(71, 50, 30, 100), nrow = 2)
save(exdat, file = "data/exdat.rdata")
```

This stores dataset in `data/exdat.rdata`.

You can document it in `R/data.R`.

:::

::: {.column width='30%'}

**Directory structure**

```
├── DESCRIPTION
├── R
├── data-raw
│   └── exdat.R
├── data
│   └── exdat.rdata
├── R
│   └── data.R
```

:::

::::

. . . 

`exdat` can now be used in examples, tests, vignettes, etc.; there is no need to define it every time it is used.

:::{.callout-caution}

## Don't forget!

If you include datasets, set `LazyData: true` in the `DESCRIPTION` file.

:::

## Self-study {.smaller}

Examples of R packages that define datasets and use them repeatedly.

- [`{ggstatsplot}`](https://github.com/IndrajeetPatil/ggstatsplot)

- [`{effectsize}`](https://github.com/easystats/effectsize)

# Unit testing

How not to repeat yourself while writing unit tests.

## Repeated test patterns {.smaller}

A **unit test** records the code to describe expected output.

</br>

(actual) {{< fa regular file-code size=2xl >}} {{< fa solid arrows-left-right size=2xl >}} {{< fa solid file-code size=2xl >}} (expected)

</br>

. . .

:::: {.columns}

::: {.column width='40%'}

Unit testing involves checking function output with a **range of inputs**, and this can involve recycling a test pattern.

:::{.callout-caution}

## Not DRY

But such recycling violates the DRY principle. How can we avoid this?

:::

:::

::: {.column width='60%'}

```{.r}
# Function to test
multiplier <- function(x, y) {
  x * y
}

# Tests
test_that(
  desc = "multiplier works as expected",
  code = {
    expect_identical(multiplier(-1, 3),  -3)
    expect_identical(multiplier(0,  3.4), 0)
    expect_identical(multiplier(NA, 4),   NA_real_)
    expect_identical(multiplier(-2, -2),  4)
    expect_identical(multiplier(3,  3),   9)
  }
)
```

:::

::::

## Parametrized unit testing {.smaller}

To avoid such repetition, we can run parameterized tests. [`{patrick}`](https://github.com/google/patrick), an extension package of [`{testthat}`](https://testthat.r-lib.org/), provides a way to write parameterized unit tests.

</br>

. . . 

:::: {.columns}

::: {.column width='52%'}

**Repeated test pattern**

`expect_identical()` used repeatedly.

```{.r}
test_that(
  desc = "multiplier works as expected",
  code = {
    expect_identical(multiplier(-1, 3),  -3)
    expect_identical(multiplier(0,  3.4), 0)
    expect_identical(multiplier(NA, 4),   NA_real_)
    expect_identical(multiplier(-2, -2),  4)
    expect_identical(multiplier(3,  3),   9)
  }
)
```

:::

::: {.column width='48%'}

**DRY testing**

`expect_identical()` used once.

```{.r}
patrick::with_parameters_test_that(
  desc_stub = "multiplier works as expected",
  code = expect_identical(multiplier(x, y), res),
  .cases = tibble::tribble(
    ~x,  ~y,  ~res,
    -1,  3,   -3,
    0,   3.4,  0,
    NA,  4,    NA_real_,
    -2,  -2,   4,
    3,   3,    9
  )
)
```

:::

::::

## Repeated usage of testing datasets {.smaller}

# Condition messages

- error messages as an output of R functions saved in a list instead of bare strings

# Import specification

How not to repeat yourself while importing external package functions.

## Imports {.smaller}

Instead of using `::` to access external package function (`rlang::warn()`), you can specify imports explicitly via roxygen directive `#' @importFrom`.

But if you are importing some functions multiple times, you should avoid specifying the import multiple times, and instead collect all imports in a single file.

. . . 

:::: {.columns}

::: {.column width='50%'}

Import statements scattered across files:

```{.r}
# file-1
#' @importFrom rlang warn
...

# file-2
#' @importFrom rlang warn
...

#' @importFrom purrr pluck
...

# file-3
#' @importFrom rlang warn seq2
...

# file-4, file-5, etc.
...
```

:::

::: {.column width='50%'}

In `{pkgname}-package.R` file:

```{.r}
## {pkgname} namespace: start
#'
#' @importFrom rlang warn seq2
#' @importFrom purrr pluck
#'
## {pkgname} namespace: end
NULL
```

:::

::::

## Self-study {.smaller}

Examples of R packages that list the `NAMESPACE` imports in a single file this way.

- [`{usethis}`](https://github.com/r-lib/usethis/blob/main/R/usethis-package.R)

- [`{lintr}`](https://github.com/r-lib/lintr/blob/main/R/lintr-package.R)

# Conclusion

You can use these techniques to avoid repetition while developing R packages, which should make the development workflow faster, more maintainable, and less error-prone.

# Find me at...

{{< fa brands twitter >}} [Twitter](http://twitter.com/patilindrajeets)

{{< fa brands linkedin >}} [LikedIn](https://www.linkedin.com/in/indrajeet-patil-397865174/)

{{< fa brands github >}} [GitHub](http://github.com/IndrajeetPatil)

{{< fa solid link >}} [Website](https://sites.google.com/site/indrajeetspatilmorality/)

{{< fa solid envelope >}} [E-mail](mailto:patilindrajeet.science@gmail.com)

# Thank You 

And Happy (DRY) Package Development! 😊

## Session information {.smaller}

```{r}
sessioninfo::session_info(include_base = TRUE)
```

