---
#title: "DRY R Package Development"
format:
  revealjs: 
    theme: solarized
    slide-number: true
    preview-links: auto
    footer: "Source code for the slides can be found [here](https://github.com/IndrajeetPatil/dry-r-package-development/)."
#author: "Indrajeet Patil"
#affiliation: 
execute:
  echo: true
---

## DRY Package Development in R {style="text-align: center;"}

::: {style="text-align: center;"}

Indrajeet Patil

:::


<!-- ::: {style="margin-top: 10em; font-size:0.75em"} -->

<!-- - [Link to slides](https://indrajeetpatil.github.io/dry-r-package-development/) -->
<!-- - [Github repo](https://github.com/IndrajeetPatil/dry-r-package-development/) -->

<!-- ::: -->

![](media/simpsons.png){.absolute width="900" height="500" left="70" top="155"}

<!-- Need to install extension from https://github.com/quarto-ext/fontawesome -->
<!-- Run `quarto install extension quarto-ext/fontawesome` in terminal -->

# 

*"Copy and paste is a design error."* &nbsp; \- David Parnas

# Why So DRY

Why should you not repeat yourself?

## Don't Repeat Yourself (DRY) Principle {.smaller}

:::: {.columns}

::: {.column width='60%'}

The DRY Principles states that:

*Every piece of **knowledge** must have a **single** representation in the codebase.*

That is, you should not express the same thing in multiple places in multiple ways.

:::

::: {.column width='40%'}

```{r, echo=FALSE}
knitr::include_graphics("media/dry.gif")
```

:::

::::

. . . 

:::{.callout-note}

## It's about *knowledge* and not just *code*

The DRY principle is about duplication of knowledge. 
Thus, it applies to all programming entities that encode knowledge: 

- You should not duplicate code.
- You should not duplicate intent across code and comments.
- You should not duplicate knowledge in data structures.
- ...

:::

## Benefits of DRY codebase {.smaller}

- When code is duplicated, if you make change in one place, you need to make parallel changes in other places. When code is DRY, parallel modifications become unnecessary.

- Easy to maintain since there is only a single representation of knowledge that needs to be updated if the underlying knowledge changes.

- As a side effect, routines developed to remove duplicated code can become part of general-purpose utilities.

</br>

. . . 

:::{.callout-tip}

## Further Reading 

- Thomas, D., & Hunt, A. (2019). *The Pragmatic Programmer*. Addison-Wesley Professional. (**pp. 30-38**)

- Understand distinction between DRY and [DAMP (Descriptive And Meaningful Phrases)](https://stackoverflow.com/questions/6453235/what-does-damp-not-dry-mean-when-talking-about-unit-tests)

:::

# Plan

Let's see how to apply DRY principle to remove duplication in following aspects of package development:

- Documentation
- Unit testing
- Vignette setup
- Importing external functions
- Conditions

# Documentation

How not to repeat yourself while writing documentation.

## What do users read? {.smaller}

What users consult to find needed information maybe context-dependent.

</br>

. . .

{{< fa brands readme size=2xl >}} **README**: While exploring the package repository.

</br>

{{< fa file-pdf size=2xl >}} **Manual**: While reading PDF manual or help pages in the IDE.

</br>

{{< fa file size=2xl >}} **Vignettes**: While reading documentation on CRAN.

</br>

. . .

Thus, including crucial information **only in one place** makes it likely that the users might miss out on it in certain contexts.

## Go forth and multiply (without repetition) {.smaller}

:::: {.columns}

::: {.column width='40%'}

Some documentation is important enough to be included in multiple places (e.g. in the function documentation and in a vignette).

</br>

> How can you document something just *once* but include it in *multiple* locations?

:::

::: {.column width='60%'}

```{r, echo=FALSE, out.width="100%"}
knitr::include_graphics("media/spiderman.jpeg")
```

:::

::::

## Child documents

You can stitch an R Markdown document from smaller [child documents](https://bookdown.org/yihui/rmarkdown-cookbook/child-document.html).

&nbsp; &nbsp; {{< fa regular file size=5x >}} &nbsp; &nbsp; {{< fa regular plus size=5x >}} &nbsp; &nbsp; {{< fa regular file-lines size=5x >}} &nbsp;&nbsp; {{< fa soliud equals size=5x >}} &nbsp;&nbsp; {{< fa solid file-lines size=5x >}}

(parent Rmd) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (child Rmd) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (result Rmd)

. . .

Thus, the information to repeat can be stored *once* in child documents and reused *multiple* times across parents.

## Storing child documents in package {.smaller}

Stratagem: You can store child documents in the manual directory and reuse them.

:::: {.columns}

::: {.column width='30%'}

**Child documents**

```
├── DESCRIPTION
├── man
│   └── rmd-children
│       └── doc1.Rmd
│       └── ...
```

:::

::: {.column width='70%'}

`man/rmd-children/doc1.Rmd` example.

````{verbatim}
This is some crucial information to be repeated across documentation.

```{r}
1 + 1
```

````

:::

::::

</br>

:::{.callout-tip}

## Tips

- You can include as many child documents as you want.
- The child document is just like any `.Rmd` file and can include everything that any other `.Rmd` file can include.
- You can choose a different name for the folder containing child documents (e.g. `rmd-fragments`).
- Make sure to include `Roxygen: list(markdown = TRUE)` field in the `DESCRIPTION` file.

:::

## Using child documents in package {.smaller}

You can now insert contents of these child documents in the package documentation anywhere and as many as times as you want.

. . . 

:::: {.columns}

::: {.column width='30%'}

**Vignette**

```
├── DESCRIPTION
├── vignettes
│   └── vignette1.Rmd
│   └── ...
│   └── web_only
│       └── vignette2.Rmd
│       └── ...
```

:::

::: {.column width='70%'}

**Example** (`vignettes/vignette1.Rmd`)

````{verbatim}
---
output: html_vignette
---

Some content.

```{r, child = "../man/rmd-children/doc1.Rmd"}
```

````

:::

::::

. . .

:::: {.columns}

::: {.column width='30%'}

**README**

```
├── DESCRIPTION
├── README.Rmd
```

:::

::: {.column width='70%'}

**Example** (`README.Rmd`)

````{verbatim}
---
output: github_document
---

Some content.

```{r, child = "man/rmd-children/doc1.Rmd"}
```

````

:::

::::

. . . 

**etc.**

## Self-study

Example packages that use child documents to repeat documentation.

- [`{pkgdown}`](https://github.com/r-lib/pkgdown/tree/main/man/rmd-fragments)

- [`{statsExpressions}`](https://github.com/IndrajeetPatil/statsExpressions/tree/main/man/rmd-fragments)

# Vignette Setup

How not to repeat yourself while setting up vignettes.

## Setup chunks in vignettes {.smaller}

Another duplication that occurs is in setup chunks for vignettes. 

For example, some parts of the setup can be same across vignettes.

</br>

:::: {.columns}

::: {.column width='25%'}

```
├── DESCRIPTION
├── vignettes
│   └── vignette1.Rmd
│   └── vignette2.Rmd
│   └── ...
```

:::

::: {.column width='37%'}

````{verbatim}
---
title: "Vignette-1"
output: html_vignette
---

```{r}
knitr::opts_chunk$set(
  message = FALSE,
  collapse = TRUE,
  comment = "#>"
)
```

````

:::

::: {.column width='37%'}

````{verbatim}
---
title: "Vignette-2"
output: html_vignette
---

```{r}
knitr::opts_chunk$set(
  message = FALSE,
  collapse = TRUE,
  comment = "#>"
)

options(crayon.enabled = TRUE)
```

````

:::

::::

</br>

How can this repetition be avoided?

## Sourcing setup chunks in vignettes {.smaller}

:::: {.columns}

::: {.column width='80%'}

To avoid repeating the same setup across vignettes, you can extract the **common** setup out into a script (`vignettes/setup/setup.R`), and source it from vignettes.

:::

::: {.column width='20%'}

```

├── DESCRIPTION
├── vignettes
│   └── setup
│       └── setup.R
```

:::

::::

</br>

. . . 

:::: {.columns}

::: {.column width='26%'}

`setup.R` contents

```{.r}
knitr::opts_chunk$set(
  message = FALSE,
  collapse = TRUE,
  comment = "#>"
)
```

:::

::: {.column width='37%'}

Sourcing common setup

````{verbatim}
---
title: "Vignette-1"
output: html_vignette
---

```{r setup, include = FALSE}
source("setup/setup.R")
```

````

:::

::: {.column width='37%'}

Sourcing common setup

````{verbatim}
---
title: "Vignette-2"
output: html_vignette
---

```{r setup, include = FALSE}
source("setup/setup.R")
options(crayon.enabled = TRUE)
```

````

:::

::::

. . . 

</br>

Now common setup can be modified with a single change in setup script!

## Self-study

Packages in the wild that use this trick.

- [`{dm}`](https://github.com/cynkra/dm/blob/main/vignettes/setup/setup.R)

# Data

How not to repeat yourself while creating and re-using example datasets.

## Illustrative example datasets {.smaller}

If none of the existing datasets are useful to illustrate your functions, you can create new datasets.

. . . 

Let's say your example dataset is called `exdat` and function is called `foo()`. Using it in examples, vignettes, README, etc. requires that it be define *multiple* times.

:::: {.columns}

::: {.column width='33%'}

**In examples**

```{.r}
#' @examples
#' exdat <- matrix(c(71, 50))
#' foo(exdat)
```

:::

::: {.column width='33%'}

**In vignettes**

````{verbatim}
---
title: "My Vignette"
output: html_vignette
---

```{r}
exdat <- matrix(c(71, 50))
foo(exdat)
```
````

:::

::: {.column width='33%'}

**In README**

````{verbatim}
---
output: github_document
---

```{r}
exdat <- matrix(c(71, 50))
foo(exdat)
```
````

:::

::::

</br>

. . . 

How can this repetition be avoided?

## Shipping data in a package {.smaller}

You can avoid this repetition by defining the data just *once*, saving and shipping it with the package.

The datasets are stored in `data/`, and documented in `R/data.R`.

. . . 

:::: {.columns}

::: {.column width='70%'}

**Saving data**

```{r, eval=FALSE}
# In `exdat.R`
exdat <- matrix(c(71, 50))
save(exdat, file = "data/exdat.rdata")
```

:::

::: {.column width='30%'}

**Directory structure**

```
├── DESCRIPTION
├── R
├── data-raw
│   └── exdat.R
├── data
│   └── exdat.rdata
├── R
│   └── data.R
```

:::

::::

. . . 

:::{.callout-caution}

## Don't forget!

- For future reference, save script (in `data-raw/` folder) to (re)create or update the dataset.
- If you include datasets, set `LazyData: true` in the `DESCRIPTION` file.

:::

## Reusable dataset {.smaller}

`exdat` can now be used in examples, tests, vignettes, etc.; there is no need to define it every time it is used.

:::: {.columns}

::: {.column width='33%'}

**In examples**

```{.r}
#' @examples
#' foo(exdat)
```

:::

::: {.column width='33%'}

**In vignettes**

````{verbatim}
---
title: "My Vignette"
output: html_vignette
---

```{r}
foo(exdat)
```
````

:::

::: {.column width='33%'}

**In README**

````{verbatim}
---
output: github_document
---

```{r}
foo(exdat)
```
````

:::

::::

</br>


:::{.callout-tip}

## No parallel modification

Note that if you now wish to update the dataset, you need to change its definition only in *one* place!

:::

## Self-study

Examples of R packages that define datasets and use them repeatedly.

- [`{ggstatsplot}`](https://github.com/IndrajeetPatil/ggstatsplot)

- [`{effectsize}`](https://github.com/easystats/effectsize)

# Unit testing

How not to repeat yourself while writing unit tests.

## Repeated test patterns {.smaller}

A **unit test** records the code to describe expected output.

</br>

(actual) {{< fa regular file-code size=2xl >}} {{< fa solid arrows-left-right size=2xl >}} {{< fa solid file-code size=2xl >}} (expected)

</br>

. . .

:::: {.columns}

::: {.column width='40%'}

Unit testing involves checking function output with a **range of inputs**, and this can involve recycling a test pattern.

:::{.callout-caution}

## Not DRY

But such recycling violates the DRY principle. How can you avoid this?

:::

:::

::: {.column width='60%'}

```{.r}
# Function to test
multiplier <- function(x, y) {
  x * y
}

# Tests
test_that(
  desc = "multiplier works as expected",
  code = {
    expect_identical(multiplier(-1, 3),  -3)
    expect_identical(multiplier(0,  3.4), 0)
    expect_identical(multiplier(NA, 4),   NA_real_)
    expect_identical(multiplier(-2, -2),  4)
    expect_identical(multiplier(3,  3),   9)
  }
)
```

:::

::::

## Parametrized unit testing {.smaller}

To avoid such repetition, you can run parameterized tests. [`{patrick}`](https://github.com/google/patrick), an extension package of [`{testthat}`](https://testthat.r-lib.org/), provides a way to write parameterized unit tests.

</br>

. . . 

:::: {.columns}

::: {.column width='52%'}

**Repeated test pattern**

`expect_identical()` used repeatedly.

```{.r}
test_that(
  desc = "multiplier works as expected",
  code = {
    expect_identical(multiplier(-1, 3),  -3)
    expect_identical(multiplier(0,  3.4), 0)
    expect_identical(multiplier(NA, 4),   NA_real_)
    expect_identical(multiplier(-2, -2),  4)
    expect_identical(multiplier(3,  3),   9)
  }
)
```

:::

::: {.column width='48%'}

**DRY testing**

`expect_identical()` used once.

```{.r}
patrick::with_parameters_test_that(
  desc_stub = "multiplier works as expected",
  code = expect_identical(multiplier(x, y), res),
  .cases = tibble::tribble(
    ~x,  ~y,  ~res,
    -1,  3,   -3,
    0,   3.4,  0,
    NA,  4,    NA_real_,
    -2,  -2,   4,
    3,   3,    9
  )
)
```

:::

::::

## Repeated usage of testing datasets {.smaller}

You have already seen how *user*-facing datasets - useful for illustrating function usage - can be defined and saved once and then used repeatedly.

Similarly, you can define and save *developer*-facing datasets - useful for testing purposes - and use them across multiple tests.

</br>

. . . 

:::: {.columns}

::: {.column width='40%'}

Saving datasets in either of these locations is fine.

:::

::: {.column width='30%'}

```
├── DESCRIPTION
├── tests
│   └── data
│       └── script.R
│       └── testdat1.rdata
│       └── testdat2.rdata
│       └── ...
```

:::

::: {.column width='30%'}

```
├── DESCRIPTION
├── tests
│   └── testthat
│       └── data
│           └── script.R
│           └── testdat1.rdata
│           └── testdat2.rdata
│           └── ...
```

:::
::::

:::{.callout-caution}

## Save the script!

Always save the script used to create datasets. This script act as documentation for the datasets and also makes it easy to modify the datasets in the future (if needed).

:::

## Using test datasets {.smaller}

Without stored datasts, you define the same datasets **multiple** times across test files.

:::: {.columns}

::: {.column width='35%'}

In `test-foo1.R`:

```r
testdat1 <- { ... }
foo1(testdat1)
```

:::

::: {.column width='35%'}

In `test-foo2.R`:

```r
testdat1 <- { ... }
foo2(testdat1)
```

:::

::: {.column width='30%'}

&nbsp; &nbsp; &nbsp; &nbsp; `...`

:::

::::

</br>

. . . 

Without saved datasets, you define just **once** and load them from test files.

:::: {.columns}

::: {.column width='35%'}

In `test-foo1.R`:

```r
testdat1 <- readRDS("testdat1")
foo1(testdat1)
```

:::

::: {.column width='35%'}

In `test-foo2.R`:

```r
testdat1 <- readRDS("testdat1")
foo2(testdat1)
```

:::


::: {.column width='30%'}

&nbsp; &nbsp; &nbsp; &nbsp; `...`

:::

::::

</br>

:::{.callout-note}

The exact path provided to `readRDS()` will depend on where the datasets are stored inside the `tests/` folder.

:::

## Self-study

Examples of R packages that save datasets required for unit testing.

- [`{ospsuite}`](https://github.com/Open-Systems-Pharmacology/OSPSuite-R/tree/develop/tests/data)

- [`{dm}`](https://github.com/cynkra/dm/tree/main/tests/testthat/dm)

# Conditions

How not to repeat yourself while signalling conditions.

## Sending signals {.smaller}

Conditions (messages, warnings, and errors) provide a way for functions to signal to the user that something unexpected happened.

. . . 

Often, similar conditions need to be signalled across functions. E.g., for functions that don't accept negative values:

**input validation**

:::: {.columns}

::: {.column width='50%'}

```{.r}
foo1 <- function(x) {
  if (x < 0) {
    stop("Argument `x` should be positive.")
  }
  
  ...
}
```

:::

::: {.column width='50%'}

```{.r}
foo2 <- function(y) {
  if (y < 0) {
    stop("Argument `y` should be positive.")
  }
  
  ...
}
```

:::

::::

**unit testing**

:::: {.columns}

::: {.column width='50%'}

```{.r}
expect_error(
  foo1(-1), 
  "Argument `x` should be positive."
)
```

:::

::: {.column width='50%'}

```{.r}
expect_error(
  foo2(-1), 
  "Argument `y` should be positive."
)
```

:::

::::
. . . 

How can this repetition be avoided?

## List of condition functions {.smaller}

We can avoid this repetition by extracting condition strings in a separate function with an informative name. And then storing all such functions in a list.

```r
conditions <- list(
  only_positives_allowed = function(arg_name) {
    paste0("Argument `", arg_name, "` should be positive.")
  },
  
  ... # you can store as many functions as you want
)
```

. . . 

We can then use these functions to signal conditions. 

:::: {.columns}

::: {.column width='50%'}

```r
foo1 <- function(x) {
  if (x < 0) {
    stop(conditions$only_positives_allowed("x"))
  }
  
  ...
}
```

:::

::: {.column width='50%'}

```r
foo2 <- function(y) {
  if (y < 0) {
    stop(conditions$only_positives_allowed("y"))
  }
  
  ...
}
```

:::

::::

:::{.callout-tip}

## No parallel modification

Note that if you now wish to change the condition string, this change needs to be made only in *one* place!

:::


## Self-study

Examples of R packages that use a list of condition functions.

- [`{ospsuite.utils}`](https://github.com/Open-Systems-Pharmacology/OSPSuite.RUtils/blob/develop/R/messages.R)

# Import specification

How not to repeat yourself while importing external package functions.

## Imports {.smaller}

Instead of using `::` to access external package function (`rlang::warn()`), you can specify imports explicitly via roxygen directive `#' @importFrom`.

But if you are importing some functions multiple times, you should avoid specifying the import multiple times, and instead collect all imports in a single file.

. . . 

:::: {.columns}

::: {.column width='50%'}

Import statements scattered across files:

```{.r}
# file-1
#' @importFrom rlang warn
...

# file-2
#' @importFrom rlang warn
...

#' @importFrom purrr pluck
...

# file-3
#' @importFrom rlang warn seq2
...

# file-4, file-5, etc.
...
```

:::

::: {.column width='50%'}

In `{pkgname}-package.R` file:

```{.r}
## {pkgname} namespace: start
#'
#' @importFrom rlang warn seq2
#' @importFrom purrr pluck
#'
## {pkgname} namespace: end
NULL
```

:::

::::

## Self-study

Examples of R packages that list the `NAMESPACE` imports in a single file this way.

- [`{usethis}`](https://github.com/r-lib/usethis/blob/main/R/usethis-package.R)

- [`{lintr}`](https://github.com/r-lib/lintr/blob/main/R/lintr-package.R)

# Conclusion

You can use these techniques to avoid repetition while developing R packages, which should make the development workflow faster, more maintainable, and less error-prone.

# Find me at...

{{< fa brands twitter >}} [Twitter](http://twitter.com/patilindrajeets)

{{< fa brands linkedin >}} [LikedIn](https://www.linkedin.com/in/indrajeet-patil-397865174/)

{{< fa brands github >}} [GitHub](http://github.com/IndrajeetPatil)

{{< fa solid link >}} [Website](https://sites.google.com/site/indrajeetspatilmorality/)

{{< fa solid envelope >}} [E-mail](mailto:patilindrajeet.science@gmail.com)

# Thank You 

And Happy (DRY) Package Development! 😊

## Session information {.smaller}

```{r}
sessioninfo::session_info(include_base = TRUE)
```

